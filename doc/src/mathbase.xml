<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE module SYSTEM "api.dtd">

<module name="pygame2.math.base">
  <show>0</show>
  <alias>pygame2.math</alias>
  <short>Vector math module for Pygame2</short>
  <desc>
    Vector math module for Pygame2
  </desc>
  <func name="vector_from_polar">
    <call>vector_from_polar (p1, p2) -> Vector2</call>
    <desc></desc>
  </func>
  <func name="vector_from_spherical">
    <call>vector_from_spherical (p1, p2, p3) -> Vector2</call>
    <desc></desc>
  </func>

  <class name="Vector">
    <constructor>Vector () -> Vector</constructor>
    <desc>Creates a new Vector.
    </desc>
    <attr name="dimension">
      <desc>Gets the dimensions of the :class:`Vector`.</desc>
    </attr>
    <attr name="length">
      <desc>Gets the length of the :class:`Vector`.</desc>
    </attr>
    <attr name="length_squared">
      <desc>Gets the length of the :class:`Vector`.</desc>
    </attr>
    <attr name="epsilon">
      <desc>Gets or sets the exactness delta of the :class:`Vector`.</desc>
    </attr>
    <attr name="elements">
      <desc>Gets or sets the elements of the :class:`Vector`.
    
      This will only set a maximum of :attr:`dimension` values.
      </desc>
    </attr>
    <attr name="normalized">
      <desc>Gets whether the :class:`Vector` is normalized.</desc>
    </attr>
    <method name="normalize">
      <call>normalize () -> Vector</call>
      <desc></desc>
    </method>
    <method name="normalize_ip">
      <call>normalize_ip () -> None</call>
      <desc></desc>
    </method>
    <method name="slerp">
      <call>slerp () -> Vector</call>
      <desc></desc>
    </method>
    <method name="lerp">
      <call>lerp () -> Vector</call>
      <desc></desc>
    </method>
    <method name="dot">
      <call>dot () -> float</call>
      <desc></desc>
    </method>
    <method name="scale_to">
      <call>scale_to (v) -> Vector</call>
      <desc></desc>
    </method>
    <method name="reflect">
      <call>reflect () -> Vector</call>
      <desc></desc>
    </method>
    <method name="reflect_ip">
      <call>reflect_ip () -> None</call>
      <desc></desc>
    </method>
    <method name="distance">
      <call>distance () -> None</call>
      <desc></desc>
    </method>
    <method name="distance_squared">
      <call>distance_squared () -> None</call>
      <desc></desc>
    </method>
  </class>
  
  <class name="Vector2">
    <constructor>Vector2 () -> Vector2</constructor>
    <desc>Creates a new Vector2.
    
      A simple 2D vector containing only two elements.
    </desc>
    <attr name="dimension">
      <desc>Gets the dimensions of the :class:`Vector2`.</desc>
    </attr>
    <attr name="elements">
      <desc>Gets or sets the elements of the :class:`Vector2`.
    
        This will only set a maximum of two values.
      </desc>
    </attr>
    <attr name="x">
      <desc>Gets or sets first element of the :class:`Vector2`.</desc>
    </attr>
    <attr name="y">
      <desc>Gets or sets second element of the :class:`Vector2`.</desc>
    </attr>
    <method name="rotate">
      <call>rotate () -> Vector2</call>
      <desc></desc>
    </method>
    <method name="rotate_ip">
      <call>rotate_ip () -> Vector2</call>
      <desc></desc>
    </method>
    <method name="as_polar">
      <call>as_polar () -> float, float</call>
      <desc></desc>
    </method>
    <method name="angle_to">
      <call>angle_to (v) -> float</call>
      <desc></desc>
    </method>
    <method name="cross">
      <call>cross (v) -> Vector2</call>
      <desc></desc>
    </method>
  </class>

  <class name="Vector3">
    <constructor>Vector3 () -> Vector3</constructor>
    <desc>Creates a new Vector3.
    
      A simple 3D vector containing only three elements.
    </desc>
    <attr name="dimension">
      <desc>Gets the dimensions of the :class:`Vector3`.</desc>
    </attr>
    <attr name="elements">
      <desc>Gets or sets the elements of the :class:`Vector3`.
    
        This will only set a maximum of three values.
      </desc>
    </attr>
    <attr name="x">
      <desc>Gets or sets first element of the :class:`Vector3`.</desc>
    </attr>
    <attr name="y">
      <desc>Gets or sets second element of the :class:`Vector3`.</desc>
    </attr>
    <attr name="z">
      <desc>Gets or sets third element of the :class:`Vector3`.</desc>
    </attr>
    <method name="rotate_x">
      <call>rotate_x () -> Vector3</call>
      <desc></desc>
    </method>
    <method name="rotate_x_ip">
      <call>rotate_x_ip () -> None</call>
      <desc></desc>
    </method>
    <method name="rotate_y">
      <call>rotate_y () -> Vector3</call>
      <desc></desc>
    </method>
    <method name="rotate_y_ip">
      <call>rotate_y_ip () -> None</call>
      <desc></desc>
    </method>
    <method name="rotate_z">
      <call>rotate_z () -> Vector3</call>
      <desc></desc>
    </method>
    <method name="rotate_z_ip">
      <call>rotate_z_ip () -> None</call>
      <desc></desc>
    </method>
    <method name="rotate">
      <call>rotate () -> Vector3</call>
      <desc></desc>
    </method>
    <method name="rotate_ip">
      <call>rotate_ip () -> Vector3</call>
      <desc></desc>
    </method>
    <method name="angle_to">
      <call>angle_to (v) -> float</call>
      <desc></desc>
    </method>
    <method name="cross">
      <call>cross (v) -> Vector3</call>
      <desc></desc>
    </method>
    <method name="as_spherical">
      <call>as_spherical () -> float, float, float</call>
      <desc></desc>
    </method>
  </class>

</module>

